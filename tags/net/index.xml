<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Net on Cold World</title>
    <link>http://coldcoding.top/tags/net/</link>
    <description>Recent content in Net on Cold World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>hanlengcold@gmail.com (Cold)</managingEditor>
    <webMaster>hanlengcold@gmail.com (Cold)</webMaster>
    <lastBuildDate>Mon, 17 Jul 2023 21:53:08 +0800</lastBuildDate>
    <atom:link href="http://coldcoding.top/tags/net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenVSwitch</title>
      <link>http://coldcoding.top/tech/net/openvswitch/</link>
      <pubDate>Mon, 17 Jul 2023 21:53:08 +0800</pubDate><author>hanlengcold@gmail.com (Cold)</author>
      <guid>http://coldcoding.top/tech/net/openvswitch/</guid>
      <description>OVS 网络架构 Open vswitch 是一个开放的虚拟交换机，支持 openflow 协议，被远端的控制器通过 openflow 协议统一管理，从而实现对接入的虚拟机或设备进行组网和互通，主要作用就是:&#xA;传递虚拟机之间的流量 实现虚拟机和外界网络之间的通信 OVS 内部结构 OVS 有三个核心的部分:&#xA;ovs-vswitchd: 实现 OVS 守护进程 daemon，OVS 的核心部件，实现交换功能，和 Linux 内核兼容模块一起，实现基于流的交换（flow-based switching）。它和上层 controller 通信遵从 OPENFLOW 协议，它与 ovsdb-server 通信使用 OVSDB 协议，它和内核模块通过 netlink 通信，它支持多个独立的 datapath（网桥），它通过更改 flow table 实现了绑定和 VLAN 等功能。 ovsdb-server: 轻量级的数据库服务，主要保存了整个 OVS 的配置信息，包括 port、交换内容、VLAN 等。ovs-vswitchd 会根据数据库中的配置信息工作。它于 manager 和 ovs-vswitchd 交换信息使用了 OVSDB(JSON-RPC) 的方式。 ovs kernal module(datapath + flowtable): 内核模块，负责执行数据处理，把从接收端口收到的数据包在流表中进行匹配，并执行匹配到的动作。处理包交换和隧道，缓存 flow，如果在内核的缓存中找到转发规则则转发，否则发向用户空间去处理。一个 datapath 可以对应多个 vport，一个 vport 类似物理交换机的端口概念。每一个 ovs 网桥（交换机）都有一个内核空间的 datapath 与之相对应，可以说这个 datapath 就是 ovs 网桥（交换机）的实体，数据流都是受它控制，而它是根据 flow table 。每一个 datapth 在内核中都关联一个 flow table，一个 flow table 包含多个条目，每个条目包括两个内容：一个 match/key 和一个 action。 为了方便配置和管理，所以有了下面的工具:</description>
    </item>
    <item>
      <title>控制面和转发面</title>
      <link>http://coldcoding.top/tech/net/control-plane-forward-plane/</link>
      <pubDate>Sat, 24 Jun 2023 20:28:36 +0000</pubDate><author>hanlengcold@gmail.com (Cold)</author>
      <guid>http://coldcoding.top/tech/net/control-plane-forward-plane/</guid>
      <description>通俗理解 控制面是为了找好路径，转发面是在有个好路径的基础上转发数据，两者协作来达到网络是通的这样一个目的。&#xA;数据包是以跳为单位进行路由的，转发的决定是由接收到该数据包的路由器决定的。&#xA;The Control Plane: 决定怎么和从哪转发出去。&#xA;The Data Plane: 在路由器端口上进行实际包转发到线路上（硬件层面）。&#xA;官方定义 控制层面 ：负责路由协议的更新和交互，路由的计算等。&#xA;通过控制和管理各协议的运行使得路由器或交换机能够对整个网络的设备、链路和运行的协议有一个准确的了解，并在网络发生变化时也能及时感知并调整。&#xA;转发层面 ：负责IP数据报文的转发。&#xA;转发平面是用来进行数据的接收、解封装、封装、查找路由表进行转发数据。&#xA;控制层面和转发层面的分离&#xA;良好的系统设计应该是使控制平面与转发平面尽量分离,互不影响。 当系统的控制平面暂时出现故障时,转发平面还可以继续工作,这样可以保证网络中原有的业务不受系统故障的影响从而提高整个网络的可靠性。&#xA;在计算机网络中，路由器的主要工作就是为经过路由器的每个数据包寻找一条最佳的传输路径，并将该数据有效地传送到目的站点。在每一个路由器设备中，通常都维护了两张比较相似的表，分别为：&#xA;路由信息表（Routing Information Base），简称为RIB表、路由表 转发信息表（Forwarding Information Base）, 简称为FIB表、转发表 其中，路由表（RIB表）用来决策路由；转发表用来转发分组。&#xA;路由器的核心工作便是为经过路由器的每一个数据包找到最佳路径（最快、质量最好、路径最短等指标选择最优），并将到达不同网络的最优路径对应的路由组成一张新的表格，即FIB表。&#xA;Destination:目的网络地址、Gatewat:网关、Genmask:子网掩码、Metric:跳数、Ref:引用次数、Use：查询次数&#xA;在进行报文转发(发送)时：&#xA;先查询路由表，确定目的地址是否可达，如果可达则确定出接口和下一跳信息 再查询ARP表，获取到目的地址对应的Mac地址信息，构建完整的以太网报文。 最后查询Mac表，是为了确定报文的发送接口，确定了出接口，内核会将报文发送到对应的网卡驱动上，网卡在合适的时间会将报文发送到下一跳设备上。 </description>
    </item>
    <item>
      <title>ARP协议</title>
      <link>http://coldcoding.top/tech/net/arp-protocol/</link>
      <pubDate>Fri, 23 Jun 2023 19:05:14 +0000</pubDate><author>hanlengcold@gmail.com (Cold)</author>
      <guid>http://coldcoding.top/tech/net/arp-protocol/</guid>
      <description>ARP（Address Resolution Protocol）即地址解析协议， 用于实现从 IP 地址到 MAC 地址的映射，即询问目标 IP 对应的 MAC 地址。 在网络通信中，主机和主机通信的数据包需要依据OSI模型从上到下进行数据封装，当数据封装完整后，再向外发出。所以在局域网的通信中，不仅需要源目IP地址的封装，也需要源目MAC的封装。 一般情况下，上层应用程序更多关心IP地址而不关心MAC地址，所以需要通过ARP协议来获知目的主机的MAC地址，完成数据封装。 一问一答 同一个局域网里面，当PC1需要跟PC2进行通信时，此时PC1是如何处理的？&#xA;根据OSI数据封装顺序，发送方会自顶向下（从应用层到物理层）封装数据，然后发送出去，这里以PC1 ping PC2的过程举例:&#xA;PC1封装数据并且对外发送数据时，上图中出现了&amp;quot;failed&amp;quot;，即数据封装失败了，为什么？&#xA;当我们令PC1去ping ip2时，此时PC1便有了通信需要的源、目的IP地址，但是PC1缺少通信需要的目的MAC地址。这就好比我们要寄一个快递，如果在快递单上仅仅写了收件人的姓名（IP），却没有写收件人的地址（MAC），那么这个快递就没法寄出，因为信息不完整，那么如何获取到PC2的MAC地址呢？&#xA;PC1和PC2进行了一次ARP请求和回复过程，通过交互，PC1便具备了PC2的MAC地址信息。在真正进行通信之前，PC1还会将PC2的MAC信息放入本地的【ARP缓存表】，表里面放置了IP和MAC地址的映射信息，例如 IP2&amp;lt;-&amp;gt;MAC2。接下来，PC1再次进行数据封装，正式进入PING通信，如下:&#xA;ARP缓存表同样具有时效性，并且如果设备重启的话，这张表就会清空；也就是说，如果下次需要通信，又需要进行ARP请求。在我们的windows/macos系统下，可以通过命令行arp -a查看具体信息。s&#xA;广播请求单播回应 实际网络中，一个LAN可能有几十上百的主机：&#xA;ARP协议就需要采用以太网的&amp;quot;广播&amp;quot;功能：将请求包以广播的形式发送，交换机或WiFi设备（无线路由器）收到广播包时，会将此数据发给同一局域网的其他所有主机。&#xA;PC1发送的请求广播包同时被其他主机收到，然后PC3和PC4收到之后（发现不是问自己）则丢弃。而PC2收到之后，根据请求包里面的信息（有自己的IP地址），判断是给自己的，所以不会做丢弃动作，而是返回ARP回应包。&#xA;ARP请求是通过广播方式来实现的，那么，PC2返回ARP回应包，是否也需要通过广播来实现呢？答案是否定的。大部分网络协议在设计的时候，都需要保持极度克制，不需要的交互就砍掉，能合并的信息就合并，能不用广播就用单播，以此让带宽变得更多让网络变得更快。 ARP请求包的完整信息是：我的IP地址是IP1，MAC地址是MAC1，请问谁是PC2，你的IP2对应的MAC地址是多少？即**ARP请求首先有&amp;quot;自我介绍&amp;quot;，然后才是询问**，因此PC2在收到请求之后，就可以将PC1的IP和MAC映射信息存储在本地的【ARP缓存表】，既然知道PC1在哪里，就可以返回ARP单播回应包。&#xA;ARP 数据包 ARP 请求包 ARP 响应包 ARP 协议字段解读 从功能来看，ARP协议的功能最终是获取到MAC信息，服务于链路层，ARP是链路层协议；&#xA;从层次来看，ARP协议和IP协议都基于Ethernet协议，它们在Ethernet协议里面有独立的Type类型，前者是0x0806，后者是0x0800，ARP是网络层。&#xA;ARP是解决同一个局域网上的主机或路由器的IP地址和硬件地址的映射问题，如果所要找的目标设备和源主机不在同一个局域网上。&#xA;&amp;lt;1&amp;gt; 此时主机 A 就无法解析出主机 B 的硬件地址（实际上主机 A 也不需要知道远程主机 B 的硬件地址）;&#xA;&amp;lt;2&amp;gt; 此时主机A需要的是将路由器R1的IP地址解析出来，然后将该IP数据报发送给路由器R1.&#xA;&amp;lt;3&amp;gt; R1从路由表中找出下一跳路由器R2，同时使用ARP解析出R2的硬件地址。于是IP数据报按照路由器R2的硬件地址转发到路由器R2。&#xA;&amp;lt;4&amp;gt; 路由器R2在转发这个IP数据报时用类似方法解析出目的主机B的硬件地址，使IP数据报最终交付给主机B.&#xA;最初h2会通过将自己和h3的ip地址同子网掩码与运算得知：自己和h3在同一网段，可直接通信； 2.h2对数据包二层封装时，发现自己并不知道h3的mac地址，于是发送ARP广播包； 3.switch收到arp广播包后，由于没有流表，于是它向控制器发送packet_in消息； 4.控制器收到packet_in后，向switch发送packet_out,并下发流表给switch让它将数据包从除2端口以外的其他所有端口发送； 5.h3收到arp数据包后，在数据包里添加上自己的mac地址； 6.switch收到h3的arp包，由于没有流表项，于是向控制器发送packet_in消息； 7.控制器学习到h3的mac和ip地址，向switch发送packet_out消息并下发h3到h2的流表项； 8.h2知道了h3的mac地址，完成icmp包的封装，就向h3发包了； 9.由于switch没有h2-&amp;gt;h3的流表项，所以它还是会向控制器发送packet_in； 10.控制器发送packet_out给switch并下发h2-&amp;gt;h3的流表；至此h2和h3就能不通过控制器只通过switch直接通信啦！ 合法性检查 无效情况: 源 ip 地址为全 0 或为广播、组播；源 Mac 地址为全 0 或为组播地址。</description>
    </item>
    <item>
      <title>IP数据包传输方式</title>
      <link>http://coldcoding.top/tech/net/ip-packet-transmission-method/</link>
      <pubDate>Fri, 23 Jun 2023 19:05:12 +0000</pubDate><author>hanlengcold@gmail.com (Cold)</author>
      <guid>http://coldcoding.top/tech/net/ip-packet-transmission-method/</guid>
      <description> 单播 : 发送数据到单个目的主机，每个单播报文都有一个单播 IP 地址作为目的地址 传输方式 : 是点对点传输方式 ; 弊端 : 发送者与每个接收者之间都要建立单独的数据信道 ; 广播 : 发送数据到 同一广播域或子网内所有主机 传输方式 : 是点对多点传输方式 ; 弊端 : 最后在子网中，会给无关主机发送不需要的数据 ; 组播 : 网络中某些用户需要特定数据，发送者只需要发送一次组播数据，通过组播协议，为组播数据包建立组播分发树，被传递的数据到达距离用户最近的路由器后，开始复制分发； 传输方式 : 是 点对多点 传输方式 ； 优势 : 提高了数据传送效率 ；减少了主干网拥塞的可能性 ；组播相比于单播的优势在于相同的报文在每条链路上最多有一份；组播相比于广播的优势在于组播的报文是按需发送且组播可以跨网段传输。 </description>
    </item>
  </channel>
</rss>
